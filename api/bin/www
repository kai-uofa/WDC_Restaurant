#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('wdc-restaurant:server');
const fs = require('fs');
const http = require('http');
const https = require('https');
const app = require('../app');

/**
 * Get port from environment and store in Express.
 */

// eslint-disable-next-line no-use-before-define
const portHTTP = normalizePort(process.env.PORT || '5000');
app.set('portHTTP', portHTTP);

const portHTTPS = portHTTP + 443;
app.set('portHTTPS', portHTTPS);

/**
 * Specify HTTPS Options
 */

const httpsOptions = {
  key: fs.readFileSync('./cert/key.pem'),
  cert: fs.readFileSync('./cert/cert.pem'),
};

/**
 * Create HTTP & HTTPS server.
 */

const serverHTTP = http.createServer(app);
const serverHTTPS = https.createServer(httpsOptions, app);

/**
 * Listen on provided port, on all network interfaces.
 */

serverHTTP.listen(portHTTP);
serverHTTPS.listen(portHTTPS);

// eslint-disable-next-line no-use-before-define
serverHTTP.on('error', onErrorHTTP);
// eslint-disable-next-line no-use-before-define
serverHTTPS.on('error', onErrorHTTPS);
// eslint-disable-next-line no-use-before-define
serverHTTP.on('listening', onListeningHTTP);
// eslint-disable-next-line no-use-before-define
serverHTTPS.on('listening', onListeningHTTPS);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  // eslint-disable-next-line no-shadow
  const port = parseInt(val, 10);

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP/HTTPS server "error" event.
 */

// HTTP
function onErrorHTTP(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind =
    typeof port === 'string' ? `Pipe ${portHTTP}` : `Port ${portHTTP}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// HTTPS
function onErrorHTTPS(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind =
    typeof port === 'string' ? `Pipe ${portHTTPS}` : `Port ${portHTTPS}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP/HTTPS server "listening" event.
 */

// HTTP
function onListeningHTTP() {
  const addr = serverHTTP.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

// HTTPS
function onListeningHTTPS() {
  const addr = serverHTTP.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
